#
# FILE: .github/workflows/release.yml
#
# DESCRIPTION:
#   This GitHub Actions workflow automates the entire process of building, packaging,
#   and releasing the custom audio-only ffmpeg.wasm builds.
#
# WORKFLOW STRATEGY:
#
#   1. TRIGGER:
#      The workflow is triggered ONLY on a push to the `main` branch that includes
#      changes to the custom audio build scripts (`build/ffmpeg-audio.sh` or
#      `build/ffmpeg-wasm-audio.sh`). This prevents unnecessary runs and ensures that
#      a new release is created only when the build configuration changes.
#
#   2. VERSIONING:
#      A unique version identifier is generated by creating a SHA hash of the build
#      scripts. This content-based versioning ensures that each release is traceable
#      to the exact configuration that produced it, and it avoids conflicts with
#      upstream version tags.
#
#   3. BUILD PROCESS:
#      - The workflow runs three parallel build jobs for maximum efficiency:
#        - Build Audio ST Core (Single-Threaded WASM)
#        - Build Audio MT Core (Multi-Threaded WASM)
#        - Build JS Packages (The TypeScript-based wrapper packages)
#      - Each build job uploads its output (`dist` directory) as an artifact.
#
#   4. PACKAGING:
#      - A dedicated packaging job downloads all build artifacts.
#      - It assembles the precise UNPKG-style directory structure you specified for
#        both versioned and `latest` builds.
#      - It creates all required zip files, including the individual package archives
#        and the all-in-one bundle.
#
#   5. RELEASE:
#      - The final job uses the OFFICIAL GitHub CLI (`gh`) to create a formal GitHub
#        Release. This avoids any third-party action dependencies.
#      - It generates a new Git tag with the unique content-based version.
#      - It uploads all the generated zip files as release assets, making them
#        easily downloadable for users.
#
####################################################################################################

name: "Custom Audio Build & Release"

on:
  push:
    branches:
      - main
    paths:
      - 'build/ffmpeg-audio.sh'
      - 'build/ffmpeg-wasm-audio.sh'

jobs:
  #=================================================================================================
  # JOB 1: Build Audio Single-Threaded (ST) Core
  # Compiles the custom audio-only, single-threaded WASM core.
  #=================================================================================================
  build-audio-st-core:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Source Code"
        uses: actions/checkout@v4
      - name: "Setup Docker Buildx"
        uses: docker/setup-buildx-action@v3
      - name: "Build ST Audio Core"
        run: make prd-audio
      - name: "Upload ST Core Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-core-st-dist
          path: packages/core/dist

  #=================================================================================================
  # JOB 2: Build Audio Multi-Threaded (MT) Core
  # Compiles the custom audio-only, multi-threaded WASM core.
  #=================================================================================================
  build-audio-mt-core:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Source Code"
        uses: actions/checkout@v4
      - name: "Setup Docker Buildx"
        uses: docker/setup-buildx-action@v3
      - name: "Build MT Audio Core"
        run: make prd-mt-audio
      - name: "Upload MT Core Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-core-mt-dist
          path: packages/core-mt/dist

  #=================================================================================================
  # JOB 3: Build JavaScript Packages
  # Compiles the TypeScript wrapper packages (@ffmpeg/ffmpeg, @ffmpeg/util).
  #=================================================================================================
  build-js-packages:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Source Code"
        uses: actions/checkout@v4
      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
      - name: "Cache Node Modules"
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: "Install Dependencies"
        run: npm install
      - name: "Build All JS Packages"
        run: npm run build
      - name: "Upload ffmpeg Dist Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-dist
          path: packages/ffmpeg/dist
      - name: "Upload util Dist Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: util-dist
          path: packages/util/dist
      - name: "Upload types Package Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: types-pkg
          path: packages/types

  #=================================================================================================
  # JOB 4: Package & Zip All Artifacts
  # This job depends on the completion of all build jobs. It assembles the final
  # release artifacts into the desired directory structure and zips them.
  #=================================================================================================
  package-and-zip:
    runs-on: ubuntu-latest
    needs: [build-audio-st-core, build-audio-mt-core, build-js-packages]
    outputs:
      release_tag: ${{ steps.versioner.outputs.release_tag }}
      release_title: ${{ steps.versioner.outputs.release_title }}
      release_notes: ${{ steps.versioner.outputs.release_notes }}
    steps:
      - name: "Checkout Source Code"
        uses: actions/checkout@v4

      #---------------------------------------------------------------------------------------------
      # Step 4.1: Generate the Unique Version String
      # This step creates a unique version identifier based on the content of the build scripts,
      # ensuring that a new release is only created when the configuration actually changes.
      #---------------------------------------------------------------------------------------------
      - name: "Generate Content-Based Version"
        id: versioner
        run: |
          BASE_VERSION=$(node -p "require('./package.json').version")
          echo "Base Version: $BASE_VERSION"
          BUILD_HASH=$(sha256sum build/ffmpeg-audio.sh build/ffmpeg-wasm-audio.sh | sha256sum | head -c 8)
          echo "Build Hash: $BUILD_HASH"
          RELEASE_TAG="v${BASE_VERSION}-audio-custom-${BUILD_HASH}"
          RELEASE_TITLE="Custom Audio Build (${BUILD_HASH}) for v${BASE_VERSION}"
          RELEASE_NOTES="This is an automated release of the custom audio-only ffmpeg.wasm build. The build configuration hash is \`${BUILD_HASH}\`. Base ffmpeg.wasm version: \`${BASE_VERSION}\`."
          echo "Release Tag: $RELEASE_TAG"
          # Set outputs for the final release job
          echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "release_title=${RELEASE_TITLE}" >> $GITHUB_OUTPUT
          echo "release_notes=${RELEASE_NOTES}" >> $GITHUB_OUTPUT

      #---------------------------------------------------------------------------------------------
      # Step 4.2: Prepare the Release Directory
      #---------------------------------------------------------------------------------------------
      - name: "Create Staging and Release Directories"
        run: |
          mkdir -p release_files
          mkdir -p staging/@ffmpeg

      - name: "Download All Build Artifacts"
        uses: actions/download-artifact@v4
        with:
          path: staging/@ffmpeg

      - name: "Assemble Final Directory Structure"
        id: assemble
        run: |
          BASE_VERSION=$(node -p "require('./package.json').version")
          # Move downloaded artifacts into their correct package names
          mv staging/@ffmpeg/ffmpeg-core-st-dist staging/@ffmpeg/core
          mv staging/@ffmpeg/ffmpeg-core-mt-dist staging/@ffmpeg/core-mt
          mv staging/@ffmpeg/ffmpeg-dist staging/@ffmpeg/ffmpeg
          mv staging/@ffmpeg/util-dist staging/@ffmpeg/util
          mv staging/@ffmpeg/types-pkg staging/@ffmpeg/types

          # Create the final UNPKG-style directory structure
          # For "@latest" paths
          cp -r staging/@ffmpeg .
          # For versioned paths
          mkdir -p versioned_packages
          cp -r staging/@ffmpeg/core versioned_packages/core@${BASE_VERSION}
          cp -r staging/@ffmpeg/core-mt versioned_packages/core-mt@${BASE_VERSION}
          cp -r staging/@ffmpeg/ffmpeg versioned_packages/ffmpeg@${BASE_VERSION}
          cp -r staging/@ffmpeg/util versioned_packages/util@${BASE_VERSION}
          cp -r staging/@ffmpeg/types versioned_packages/types@${BASE_VERSION}
          # Move the versioned packages into the final @ffmpeg directory
          mv versioned_packages/* ./@ffmpeg

      #---------------------------------------------------------------------------------------------
      # Step 4.3: Create All Zip Archives
      #---------------------------------------------------------------------------------------------
      - name: "Create All Zip Files"
        run: |
          BASE_VERSION=$(node -p "require('./package.json').version")
          cd @ffmpeg
          # Zip each package/version/bundle combination
          zip -r ../release_files/core@${BASE_VERSION}-esm.zip ./core@${BASE_VERSION}/dist/esm
          zip -r ../release_files/core@${BASE_VERSION}-umd.zip ./core@${BASE_VERSION}/dist/umd
          zip -r ../release_files/core@latest-esm.zip ./core/dist/esm
          zip -r ../release_files/core@latest-umd.zip ./core/dist/umd
          zip -r ../release_files/core-mt@${BASE_VERSION}-esm.zip ./core-mt@${BASE_VERSION}/dist/esm
          zip -r ../release_files/core-mt@${BASE_VERSION}-umd.zip ./core-mt@${BASE_VERSION}/dist/umd
          zip -r ../release_files/core-mt@latest-esm.zip ./core-mt/dist/esm
          zip -r ../release_files/core-mt@latest-umd.zip ./core-mt/dist/umd
          zip -r ../release_files/ffmpeg@${BASE_VERSION}-esm.zip ./ffmpeg@${BASE_VERSION}/dist/esm
          zip -r ../release_files/ffmpeg@${BASE_VERSION}-umd.zip ./ffmpeg@${BASE_VERSION}/dist/umd
          zip -r ../release_files/ffmpeg@latest-esm.zip ./ffmpeg/dist/esm
          zip -r ../release_files/ffmpeg@latest-umd.zip ./ffmpeg/dist/umd
          zip -r ../release_files/util@${BASE_VERSION}.zip ./util@${BASE_VERSION}/dist
          zip -r ../release_files/util@latest.zip ./util/dist
          zip -r ../release_files/types@${BASE_VERSION}.zip ./types@${BASE_VERSION}
          zip -r ../release_files/types@latest.zip ./types
          cd ..
          # Create the all-in-one zip file for the latest ESM builds
          # We need to construct a temporary directory for this to get the clean structure.
          mkdir -p all-in-one/@ffmpeg
          cp -r ./@ffmpeg/core ./all-in-one/@ffmpeg/core
          cp -r ./@ffmpeg/core-mt ./all-in-one/@ffmpeg/core-mt
          cp -r ./@ffmpeg/ffmpeg ./all-in-one/@ffmpeg/ffmpeg
          cp -r ./@ffmpeg/util ./all-in-one/@ffmpeg/util
          cp -r ./@ffmpeg/types ./all-in-one/@ffmpeg/types
          # Remove the non-ESM directories from the all-in-one bundle
          find ./all-in-one -type d -name "umd" -exec rm -rf {} +
          find ./all-in-one -type d -name "cjs" -exec rm -rf {} +
          cd all-in-one
          zip -r ../release_files/@ffmpeg@latest-esm.zip .
          cd ..


      - name: "Upload Release Artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: release-archives
          path: release_files/

  #=================================================================================================
  # JOB 5: Create GitHub Release and Upload Assets
  # The final job. It creates the formal release using the official GitHub CLI and uploads
  # the zipped archives. It uses the version tag generated in the previous job.
  #=================================================================================================
  release:
    runs-on: ubuntu-latest
    needs: [package-and-zip]
    permissions:
      contents: write # This permission is required to create releases and tags.
    steps:
      - name: "Download Release Archives"
        uses: actions/download-artifact@v4
        with:
          name: release-archives
          path: release_files

      - name: "Create GitHub Release with gh CLI"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ needs.package-and-zip.outputs.release_tag }} \
            --title "${{ needs.package-and-zip.outputs.release_title }}" \
            --notes "${{ needs.package-and-zip.outputs.release_notes }}" \
            release_files/*