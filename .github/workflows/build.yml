#
# FILE: .github/workflows/build.yml
#
# DESCRIPTION:
#   This workflow builds and releases our custom, audio-only version of ffmpeg.wasm.
#   It uses the official CI job structure and mirrors its best practices, including
#   a comprehensive hashing strategy for cache and versioning.
#
# VERSION: 5.0
#
# CHANGE LOG:
#   - v5.0:
#     - CORRECTED: Aligned the release versioning hash with the official CI's
#       caching hash (`hashFiles('Dockerfile', 'Makefile', 'build/*')`). This
#       ensures any change to the build system triggers a new release.
#
####################################################################################################

name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      # Any change to the build system will now trigger a new release.
      - 'Dockerfile'
      - 'Makefile'
      - 'build/**'

jobs:
  # --- PRIMARY BUILD JOBS ---
  # These jobs now use a robust cache key that looks at all build-related files.

  build-core:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2
      - name: Update pkg-config database
        run: sudo ldconfig
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache build
        id: cache-build
        uses: actions/cache@v4
        with:
          path: build-cache-st
          key: build-cache-st-v1-${{ hashFiles('Dockerfile', 'Makefile', 'build/*') }}
          restore-keys: |
            build-cache-st-v1-
      - name: Build Custom ffmpeg-core (ST)
        run: make prd EXTRA_ARGS="--cache-from=type=local,src=build-cache-st --cache-to=type=local,dest=build-cache-st,mode=max"
      - name: Upload core
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-core-st-dist
          path: packages/core/dist/*

  build-core-mt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache build
        id: cache-build
        uses: actions/cache@v4
        with:
          path: build-cache-mt
          key: build-cache-mt-v1-${{ hashFiles('Dockerfile', 'Makefile', 'build/*') }}
          restore-keys: |
            build-cache-v1-
      - name: Build Custom ffmpeg-core (MT)
        run: make prd-mt EXTRA_ARGS="--cache-from=type=local,src=build-cache-mt --cache-to=type=local,dest=build-cache-mt,mode=max"
      - name: Upload core-mt
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-core-mt-dist
          path: packages/core-mt/dist/*

  # --- JAVASCRIPT & TYPESCRIPT BUILD JOB ---

  build-js-packages:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install Dependencies
        run: npm install
      - name: Build All JS Packages
        run: npm run build
      - name: Upload ffmpeg Dist Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-dist
          path: packages/ffmpeg/dist
      - name: Upload util Dist Artifact
        uses: actions/upload-artifact@v4
        with:
          name: util-dist
          path: packages/util/dist
      - name: Upload types Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: types-pkg
          path: packages/types

  # --- PACKAGING AND RELEASE JOB ---

  package-and-release:
    runs-on: ubuntu-latest
    needs:
      - build-core
      - build-core-mt
      - build-js-packages
    permissions:
      contents: write # Required to create a GitHub Release
    steps:
      - name: "Checkout Source Code"
        uses: actions/checkout@v4

      - name: "Generate Content-Based Version"
        id: versioner
        run: |
          BASE_VERSION=$(node -p "require('./package.json').version")
          # CORRECTED: This hash now includes all build-related files for robust versioning.
          BUILD_HASH=$(sha256sum Dockerfile Makefile build/* | sha256sum | head -c 8)
          RELEASE_TAG="v${BASE_VERSION}-audio-custom-${BUILD_HASH}"
          RELEASE_TITLE="Custom Audio Build (${BUILD_HASH}) for v${BASE_VERSION}"
          RELEASE_NOTES="This is an automated release of the custom audio-only ffmpeg.wasm build. The build configuration hash is \`${BUILD_HASH}\`. Base ffmpeg.wasm version: \`${BASE_VERSION}\`."
          echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "release_title=${RELEASE_TITLE}" >> $GITHUB_OUTPUT
          echo "release_notes=${RELEASE_NOTES}" >> $GITHUB_OUTPUT

      - name: "Download All Build Artifacts"
        uses: actions/download-artifact@v4
        with:
          path: staging/@ffmpeg

      - name: "Assemble Final Directory Structure & Zip"
        run: |
          BASE_VERSION=$(node -p "require('./package.json').version")
          mkdir -p release_files

          # Move the artifacts into their final package names for release
          mv staging/@ffmpeg/ffmpeg-core-st-dist staging/@ffmpeg/core
          mv staging/@ffmpeg/ffmpeg-core-mt-dist staging/@ffmpeg/core-mt
          mv staging/@ffmpeg/ffmpeg-dist staging/@ffmpeg/ffmpeg
          mv staging/@ffmpeg/util-dist staging/@ffmpeg/util
          mv staging/@ffmpeg/types-pkg staging/@ffmpeg/types

          # Create the final UNPKG-style directory structure
          cp -r staging/@ffmpeg .
          mkdir -p versioned_packages
          cp -r staging/@ffmpeg/core versioned_packages/core@${BASE_VERSION}
          cp -r staging/@ffmpeg/core-mt versioned_packages/core-mt@${BASE_VERSION}
          cp -r staging/@ffmpeg/ffmpeg versioned_packages/ffmpeg@${BASE_VERSION}
          cp -r staging/@ffmpeg/util versioned_packages/util@${BASE_VERSION}
          cp -r staging/@ffmpeg/types versioned_packages/types@${BASE_VERSION}
          mv versioned_packages/* ./@ffmpeg

          # Create all the zip files
          cd @ffmpeg
          zip -r ../release_files/core@${BASE_VERSION}-esm.zip ./core@${BASE_VERSION}/dist/esm
          zip -r ../release_files/core@${BASE_VERSION}-umd.zip ./core@${BASE_VERSION}/dist/umd
          zip -r ../release_files/core@latest-esm.zip ./core/dist/esm
          zip -r ../release_files/core@latest-umd.zip ./core/dist/umd
          zip -r ../release_files/core-mt@${BASE_VERSION}-esm.zip ./core-mt@${BASE_VERSION}/dist/esm
          zip -r ../release_files/core-mt@${BASE_VERSION}-umd.zip ./core-mt@${BASE_VERSION}/dist/umd
          zip -r ../release_files/core-mt@latest-esm.zip ./core-mt/dist/esm
          zip -r ../release_files/core-mt@latest-umd.zip ./core-mt/dist/umd
          zip -r ../release_files/ffmpeg@${BASE_VERSION}-esm.zip ./ffmpeg@${BASE_VERSION}/dist/esm
          zip -r ../release_files/ffmpeg@${BASE_VERSION}-umd.zip ./ffmpeg@${BASE_VERSION}/dist/umd
          zip -r ../release_files/ffmpeg@latest-esm.zip ./ffmpeg/dist/esm
          zip -r ../release_files/ffmpeg@latest-umd.zip ./ffmpeg/dist/umd
          zip -r ../release_files/util@${BASE_VERSION}.zip ./util@${BASE_VERSION}/dist
          zip -r ../release_files/util@latest.zip ./util/dist
          zip -r ../release_files/types@${BASE_VERSION}.zip ./types@${BASE_VERSION}
          zip -r ../release_files/types@latest.zip ./types
          cd ..

          # Create the all-in-one zip file
          mkdir -p all-in-one/@ffmpeg
          cp -r ./@ffmpeg/core ./all-in-one/@ffmpeg/core
          cp -r ./@ffmpeg/core-mt ./all-in-one/@ffmpeg/core-mt
          cp -r ./@ffmpeg/ffmpeg ./all-in-one/@ffmpeg/ffmpeg
          cp -r ./@ffmpeg/util ./all-in-one/@ffmpeg/util
          cp -r ./@ffmpeg/types ./all-in-one/@ffmpeg/types
          find ./all-in-one -type d -name "umd" -exec rm -rf {} +
          find ./all-in-one -type d -name "cjs" -exec rm -rf {} +
          cd all-in-one
          zip -r ../release_files/@ffmpeg@latest-esm.zip .
          cd ..

      - name: "Create GitHub Release with gh CLI"
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.versioner.outputs.release_tag }} \
            --title "${{ steps.versioner.outputs.release_title }}" \
            --notes "${{ steps.versioner.outputs.release_notes }}" \
            release_files/*