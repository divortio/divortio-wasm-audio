package-and-commit:
  name: Package and Commit Builds
  runs-on: ubuntu-latest
  needs: [build-st, build-mt]
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Download ST Artifacts
      uses: actions/download-artifact@v4
      with:
        name: st-packages
        path: packages

    - name: Download MT Artifacts
      uses: actions/download-artifact@v4
      with:
        name: mt-packages
        path: packages

    # --- THIS IS THE CORRECTED STEP ---
    - name: Generate Build Receipt
      run: |
        echo "Generating build-receipt.json..."
        # Gracefully get filter, encoder, and decoder text, defaulting to an empty string if not found
        FILTERS_TEXT=$(grep -o '\\--enable-filter=[^ ]*' build/ffmpeg.sh | cut -d '=' -f 2 | tr '\n' ',' | sed 's/,$//') || true
        ENCODERS_TEXT=$(grep -o '\\--enable-encoder=[^ ]*' build/ffmpeg.sh | cut -d '=' -f 2) || true
        DECODERS_TEXT=$(grep -o '\\--enable-decoder=[^ ]*' build/ffmpeg.sh | cut -d '=' -f 2) || true
        BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        jq -n \
          --arg filters "$FILTERS_TEXT" \
          --arg encoders "$ENCODERS_TEXT" \
          --arg decoders "$DECODERS_TEXT" \
          --arg date "$BUILD_DATE" \
          '{
            "buildDate": $date,
            "enabledFilters": (if $filters == "" or $filters == null then [] else $filters | split(",") end),
            "enabledEncoders": (if $encoders == "" or $encoders == null then [] else $encoders | split(",") end),
            "enabledDecoders": (if $decoders == "" or $decoders == null then [] else $decoders | split(",") end)
          }' > build-receipt.json
        
        echo "Receipt generated:"
        cat build-receipt.json
    # --- END OF CORRECTED STEP ---

    - name: Organize Build Artifacts into unpkg Structure
      run: |
        rm -rf builds
        mkdir -p builds
        organize_package() {
          PKG_PATH=$1
          PKG_NAME=$(basename $PKG_PATH)
          PKG_VERSION=$(jq -r .version "$PKG_PATH/package.json")
          TARGET_DIR="builds/$PKG_NAME@$PKG_VERSION"
          echo "Packaging $PKG_NAME@$PKG_VERSION..."
          mkdir -p "$TARGET_DIR"
          cp -r "$PKG_PATH/dist" "$TARGET_DIR/"
          if [ -f "$PKG_PATH/README.md" ]; then
            cp "$PKG_PATH/README.md" "$TARGET_DIR/"
          fi
          if [[ "$PKG_NAME" == "core" || "$PKG_NAME" == "core-mt" ]]; then
            cp build-receipt.json "$TARGET_DIR/"
          fi
        }
        organize_package packages/core
        organize_package packages/core-mt
        organize_package packages/ffmpeg
        organize_package packages/util

    - name: Commit and Push Builds
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add builds/
        if ! git diff --staged --quiet; then
          git commit -m "ci: Add latest builds"
          git push
        else
          echo "No changes to commit."
        fi