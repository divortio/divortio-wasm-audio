#
# build.yml - The Main Build Orchestrator
#
name: Build and Release FFmpeg WASM Core

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # --- Phase -1: Install Dependencies ---
  install-dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Cache node_modules
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install Dependencies
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: npm install

  # --- Phase 0: Pre-Build Checks ---
  pre-build-checks:
    name: 0. Pre-Build Checks
    needs: install-dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Run Linter on Safe Packages
        run: npm run lint --workspace=@ffmpeg/util

  # --- Phase 1: Build Binaries (Parallel) ---
  build-wasm-st:
    name: 1a. Build WASM Core (ST)
    needs: pre-build-checks
    uses: ./.github/workflows/reusable-build-wasm.yml
    with:
      target: build-st
      cache_suffix: st
      artifact_name: core-st-pkg
      artifact_path: packages/core

  build-wasm-mt:
    name: 1b. Build WASM Core (MT)
    needs: pre-build-checks
    uses: ./.github/workflows/reusable-build-wasm.yml
    with:
      target: build-mt
      cache_suffix: mt
      artifact_name: core-mt-pkg
      artifact_path: packages/core-mt

  # --- Phase 2: Build JS Wrappers (Parallel) ---
  build-util-esm:
    name: 2a. Build util (ESM)
    needs: install-dependencies
    uses: ./.github/workflows/reusable-build-js.yml
    with:
      package_name: util
      format: esm
      needs_wasm: false
      artifact_name: util-esm-dist

  build-util-umd:
    name: 2b. Build util (UMD)
    needs: install-dependencies
    uses: ./.github/workflows/reusable-build-js.yml
    with:
      package_name: util
      format: umd
      needs_wasm: false
      artifact_name: util-umd-dist

  build-ffmpeg-esm:
    name: 2c. Build ffmpeg (ESM)
    needs:
      - build-wasm-st
      - build-util-esm # Though not a direct code dependency, it's logically part of the same build phase
    uses: ./.github/workflows/reusable-build-js.yml
    with:
      package_name: ffmpeg
      format: esm
      needs_wasm: true
      wasm_artifact_name: core-st-pkg
      artifact_name: ffmpeg-esm-dist

  # --- THIS IS THE CRITICAL FIX ---
  # The UMD build now explicitly depends on the ESM build completing successfully.
  build-ffmpeg-umd:
    name: 2d. Build ffmpeg (UMD)
    needs:
      - build-ffmpeg-esm # Ensures ESM artifacts are available before this job starts
      - build-util-umd   # Logical grouping with other UMD builds
    uses: ./.github/workflows/reusable-build-js.yml
    with:
      package_name: ffmpeg
      format: umd
      needs_wasm: true
      wasm_artifact_name: core-st-pkg # This is redundant as it's already fetched, but harmless
      artifact_name: ffmpeg-umd-dist

  # --- Phase 3: Package Individual Components (Parallel) ---
  package-core:
    name: 3a. Package core
    needs: build-wasm-st
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: core-st-pkg
      - run: chmod +x scripts/*.sh
      - run: ./scripts/package-core.sh
      - uses: actions/upload-artifact@v4
        with:
          name: packaged-core
          path: builds/

  package-core-mt:
    name: 3b. Package core-mt
    needs: build-wasm-mt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: core-mt-pkg
      - run: chmod +x scripts/*.sh
      - run: ./scripts/package-core-mt.sh
      - uses: actions/upload-artifact@v4
        with:
          name: packaged-core-mt
          path: builds/

  package-util:
    name: 3c. Package util
    needs: [build-util-esm, build-util-umd]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: util-esm-dist
          path: dist/esm
      - uses: actions/download-artifact@v4
        with:
          name: util-umd-dist
          path: dist/umd
      - run: chmod +x scripts/*.sh
      - run: ./scripts/package-util.sh
      - uses: actions/upload-artifact@v4
        with:
          name: packaged-util
          path: builds/

  package-ffmpeg:
    name: 3d. Package ffmpeg
    # This now depends on the UMD build, which implicitly depends on the ESM build.
    needs: build-ffmpeg-umd
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # Because the UMD job depends on the ESM job, we need to download both artifacts.
      - uses: actions/download-artifact@v4
        with:
          name: ffmpeg-esm-dist
          path: dist/esm
      - uses: actions/download-artifact@v4
        with:
          name: ffmpeg-umd-dist
          path: dist/umd
      - run: chmod +x scripts/*.sh
      - run: ./scripts/package-ffmpeg.sh
      - uses: actions/upload-artifact@v4
        with:
          name: packaged-ffmpeg
          path: builds/

  # --- Phase 4: Create GitHub Release ---
  release:
    name: 4. Create GitHub Release
    needs: [package-core, package-core-mt, package-util, package-ffmpeg]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: packaged-core
          path: builds/packaged-core
      - uses: actions/download-artifact@v4
        with:
          name: packaged-core-mt
          path: builds/packaged-core-mt
      - uses: actions/download-artifact@v4
        with:
          name: packaged-util
          path: builds/packaged-util
      - uses: actions/download-artifact@v4
        with:
          name: packaged-ffmpeg
          path: builds/packaged-ffmpeg
      # The release script needs the source packages to read their versions.
      - uses: actions/download-artifact@v4
        with:
          name: core-st-pkg
      - uses: actions/download-artifact@v4
        with:
          name: core-mt-pkg
      - run: chmod +x scripts/*.sh
      - name: Create and Publish Release
        run: ./scripts/create_release.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}