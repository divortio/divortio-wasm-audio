#
# build.yml - The Main Build Orchestrator
#
name: Build and Release FFmpeg WASM Core

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # Installs and caches Node.js dependencies
  install-dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Cache node_modules
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install Dependencies
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: npm install

  # Lints the codebase as a pre-build check
  pre-build-checks:
    name: 0. Pre-Build Checks
    needs: install-dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Run Linter
        run: npm run lint --workspace=@ffmpeg/util

  # --- Phase 1: Build WASM Binaries (Parallel) ---
  build-wasm-st:
    name: 1a. Build WASM Core (ST)
    needs: pre-build-checks
    uses: ./.github/workflows/reusable-build-wasm.yml
    with:
      target: build-st
      cache_suffix: st
      artifact_name: core-st-pkg
      artifact_path: packages/core

  build-wasm-mt:
    name: 1b. Build WASM Core (MT)
    needs: pre-build-checks
    uses: ./.github/workflows/reusable-build-wasm.yml
    with:
      target: build-mt
      cache_suffix: mt
      artifact_name: core-mt-pkg
      artifact_path: packages/core-mt

  # --- Phase 2: Build JS Wrappers ---
  build-js-wrappers:
    name: 2. Build JS Wrappers
    needs: [install-dependencies, build-wasm-st]
    uses: ./.github/workflows/reusable-build-js.yml
    # FIX: Add the 'with' block to provide the required inputs.
    with:
      wasm_artifact_name_st: core-st-pkg
      wasm_artifact_name_mt: core-mt-pkg

  # --- Phase 3: Package All Components (Parallel) ---
  package-core:
    name: 3a. Package core (ST)
    needs: build-wasm-st
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: core-st-pkg
          path: packages/core
      - run: chmod +x scripts/*.sh && ./scripts/package-core.sh
      - uses: actions/upload-artifact@v4
        with:
          name: packaged-builds
          path: builds/

  package-core-mt:
    name: 3b. Package core (MT)
    needs: build-wasm-mt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: core-mt-pkg
          path: packages/core-mt
      - run: chmod +x scripts/*.sh && ./scripts/package-core-mt.sh
      - uses: actions/upload-artifact@v4
        with:
          name: packaged-builds
          path: builds/

  package-js:
    name: 3c. Package JS Wrappers
    needs: build-js-wrappers
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: js-dists
          path: packages/
      - run: chmod +x scripts/*.sh && ./scripts/package-util.sh && ./scripts/package-ffmpeg.sh
      - uses: actions/upload-artifact@v4
        with:
          name: packaged-builds
          path: builds/

  # --- Phase 4: Create GitHub Release ---
  release:
    name: 4. Create GitHub Release
    needs: [package-core, package-core-mt, package-js]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # Download all packaged .zip files into one directory
      - uses: actions/download-artifact@v4
        with:
          name: packaged-builds
          path: builds/
      # Download source packages needed to read version numbers
      - uses: actions/download-artifact@v4
        with:
          name: core-st-pkg
          path: packages/core
      - uses: actions/download-artifact@v4
        with:
          name: core-mt-pkg
          path: packages/core-mt
      - name: Create and Publish Release
        run: |
          chmod +x scripts/create_release.sh
          ./scripts/create_release.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}