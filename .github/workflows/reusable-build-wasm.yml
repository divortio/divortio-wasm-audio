#
# reusable-build-wasm.yml
#
name: Reusable WASM Core Build

on:
  workflow_call:
    inputs:
      target:
        required: true
        type: string
      cache_suffix:
        required: true
        type: string
      artifact_name:
        required: true
        type: string
      artifact_path:
        required: true
        type: string

jobs:
  build:
    name: Build ${{ inputs.artifact_name }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Create ccache Directory
        run: mkdir -p .ccache

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ${{ runner.os }}-ccache-${{ inputs.cache_suffix }}-${{ hashFiles('**/Dockerfile', '**/Makefile', 'build/**.sh') }}
          restore-keys: |
            ${{ runner.os }}-ccache-${{ inputs.cache_suffix }}-

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker Layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-${{ inputs.cache_suffix }}
          key: ${{ runner.os }}-buildx-${{ inputs.cache_suffix }}-${{ hashFiles('**/Dockerfile', '**/Makefile', 'build/**.sh') }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ inputs.cache_suffix }}-

      # --- THIS IS THE CRITICAL FIX ---
      # EXTRA_ARGS is now passed as an environment variable to the step.
      # `make` inherits this variable, and its value is expanded by the shell
      # inside the Makefile as a sequence of arguments, not a single string.
      - name: Build WASM Core
        env:
          EXTRA_ARGS: "--mount=type=bind,source=$(pwd)/.ccache,target=/root/.ccache --cache-from=type=local,src=/tmp/.buildx-cache-${{ inputs.cache_suffix }} --cache-to=type=local,dest=/tmp/.buildx-cache-${{ inputs.cache_suffix }},mode=max"
        run: make -j ${{ inputs.target }}

      - name: Upload WASM Core Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact_name }}
          path: |
            ${{ inputs.artifact_path }}
            build/